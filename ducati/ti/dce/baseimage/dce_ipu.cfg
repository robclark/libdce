/*
 * Copyright (c) 2011, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

xdc.loadCapsule("ti/configs/omap4430/IpcCommon.cfg.xs");
xdc.includeFile("ti/configs/omap4430/DucatiSmp.cfg");
xdc.includeFile("ti/configs/omap4430/DucatiAmmu.cfg");

var Program			= xdc.useModule('xdc.cfg.Program');
var Memory			= xdc.useModule('xdc.runtime.Memory');
var HeapMem			= xdc.useModule('ti.sysbios.heaps.HeapMem');
var GateHwi			= xdc.useModule('ti.sysbios.gates.GateHwi');


Program.global.enableSMP = true;
HeapMem.common$.gate = GateHwi.create();

var heapMemParams			= new HeapMem.Params;
heapMemParams.size			= 0x19FFFF0;  // TODO check this size, maybe we can go up?
heapMemParams.sectionName	= ".systemHeap";
var heap0					= HeapMem.create(heapMemParams);
Memory.defaultHeapInstance	= heap0;
Program.global.heap0		= heap0;

/* 
 * Setup memory map.
 */

Program.sectMap[".systemHeap"]	= "EXT_HEAP";

/* Work-around for .const loading issues with MPEG4/VC1 codecs.. move AMMU
 * tables out of .const into .txt so that they have valid data when AMMU
 * is programmed (which happens before cinit initializes rw sections..
 * which is what .const becomes due to rw var mistakenly placed on .const
 */
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_mmuInitConfig__C"] = "EXT_CODE";
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_numLargePages__C"] = "EXT_CODE";
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_numLinePages__C"] = "EXT_CODE";
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_numMediumPages__C"] = "EXT_CODE";
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_numSmallPages__C"] = "EXT_CODE";

/*
 *  ======== CODEC ENGINE configurations  ========
 */

var Global = xdc.useModule('ti.sdo.ce.osal.Global'); 
Global.runtimeEnv = Global.DSPBIOS;

xdc.useModule('ti.sdo.ce.global.Settings').profile    = "debug";
xdc.loadPackage('ti.sdo.ce.video').profile            = "debug";
xdc.loadPackage('ti.sdo.ce.video3').profile           = "debug";
xdc.loadPackage('ti.sdo.ce.alg').profile              = "debug";
xdc.useModule('ti.sdo.fc.global.Settings').profile    = "debug";
xdc.loadPackage('ti.sdo.fc.rman').profile             = "debug";
xdc.loadPackage('ti.sdo.fc.ires.hdvicp').profile      = "debug";
xdc.loadPackage('ti.sdo.fc.ires.tiledmemory').profile = "debug";

var ipcSettings = xdc.useModule('ti.sdo.ce.ipc.Settings');
ipcSettings.ipc = xdc.useModule('ti.sdo.ce.ipc.bios.Ipc');
// set to true to enable debugging of codec engine
xdc.useModule('ti.sdo.ce.Settings').checked         = true;

/* Enable Memory Translation module that operates on the BIOS Resource Table */
var IpcMemory = xdc.useModule('ti.resources.IpcMemory');



//set All heaps of dskts as the default heap0
var DSKT2           = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');
DSKT2.DARAM0    = "heap0";
DSKT2.DARAM1    = "heap0";
DSKT2.DARAM2    = "heap0";
DSKT2.SARAM0    = "heap0";
DSKT2.SARAM1    = "heap0";
DSKT2.SARAM2    = "heap0";
DSKT2.ESDATA    = "heap0";
DSKT2.IPROG     = "heap0";
DSKT2.EPROG     = "heap0";
DSKT2.DSKT2_HEAP     = "heap0";

var HDVICP2                      = xdc.useModule('ti.sdo.fc.ires.hdvicp.HDVICP2');
HDVICP2.memoryBaseAddress[0]     = 0xBB000000;
HDVICP2.registerBaseAddress[0]   = 0xBA000000;
HDVICP2.resetControlAddress[0]   = 0xAA306F10;
HDVICP2.resetFxn                 = "ivahd_reset";

xdc.useModule('ti.sdo.fc.rman.RMAN');

// Load HDVICP2 support lib end decoder/encoder APIs:
var HDVICP20API = xdc.useModule('ti.sdo.codecs.hdvicp20api.HDVICP20API');
var VIDDEC3 = xdc.useModule('ti.sdo.ce.video3.IVIDDEC3');
var VIDENC2 = xdc.useModule('ti.sdo.ce.video2.IVIDENC2');

// load whatever codecs are available in the build
var codecs = [];

function loadCodec(pkg, name)
{
	try {
		var codec = xdc.useModule(pkg);
		print('loading: ' + name);
		codecs.push({ name: name, mod: codec, local: true });
	} catch(e) {
		print('no package: ' + pkg);
	}
}

loadCodec('ti.sdo.codecs.h264dec.ce.H264DEC',    'ivahd_h264dec');
loadCodec('ti.sdo.codecs.mpeg4dec.ce.MPEG4DEC',  'ivahd_mpeg4dec');
loadCodec('ti.sdo.codecs.jpegvdec.ce.JPEGVDEC',  'ivahd_jpegvdec');
loadCodec('ti.sdo.codecs.vc1vdec.ce.VC1VDEC',    'ivahd_vc1vdec');
loadCodec('ti.sdo.codecs.mpeg2vdec.ce.MPEG2VDEC','ivahd_mpeg2vdec');
loadCodec('ti.sdo.codecs.h264enc.ce.H264ENC',    'ivahd_h264enc');
loadCodec('ti.sdo.codecs.mpeg4enc.ce.MPEG4ENC',  'ivahd_mpeg4enc');
loadCodec('ti.sdo.codecs.jpegvenc.ce.JPEGVENC',  'ivahd_jpegvenc');

var engine         = xdc.useModule('ti.sdo.ce.Engine');
var myEngine       = engine.create("ivahd_vidsvr", codecs);

xdc.useModule('ti.sysbios.knl.Task');
